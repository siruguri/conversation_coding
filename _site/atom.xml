<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Conversational Coding</title>
 <link href="http://www.conversationalcoding.com//atom.xml" rel="self"/>
 <link href="http://www.conversationalcoding.com//"/>
 <updated>2014-10-15T21:37:23-07:00</updated>
 <id>http://www.conversationalcoding.com/</id>
 <author>
   <name>Mark Otto</name>
   <email></email>
 </author>

 
 <entry>
   <title>What is HTTP? How Web Applications and Browsers Communicate (Part II)</title>
   <link href="http://www.conversationalcoding.com//beginners-series/http/2014/09/02/what-is-http-part2/"/>
   <updated>2014-09-02T00:00:00-07:00</updated>
   <id>http://www.conversationalcoding.com//beginners-series/http/2014/09/02/what-is-http-part2</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;--prev_post_by_cat--&quot;&gt;the previous lesson on HTTP&lt;/a&gt;, we learned what HTTP is and how it forms a critical part of the communication systems that tie browsers, websites, and web applications together. We saw how to look at the HTTP requests being generated by a browser when loading a webpage.&lt;/p&gt;

&lt;p&gt;As we discussed, one of the essential headers in the request is the method header, that lists the method and resource
for the request. This is in fact the only required header, but there are &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields&quot;&gt;others that are there in most requests&lt;/a&gt;, some of which are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cookie: A header used to send cookies from your browser to the server&lt;/li&gt;
  &lt;li&gt;Content-Type: This is a header that describes the type of data being sent in the request, used more commonly with POST requests&lt;/li&gt;
  &lt;li&gt;Cache-Control: A header used to let the server decide whether to return a cached value of the data&lt;/li&gt;
  &lt;li&gt;User-Agent: A description of the browser or of the company that is running the robot sending this request (if this is not human-generated traffic.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see some of these headers being transmitted via the Firefox interface. For example, to see what’s in the
&lt;code&gt;Cookie:&lt;/code&gt; header, select a specific request, and then select the &lt;em&gt;Cookies&lt;/em&gt; tab on the right. Here for example is a view
of the cookies being sent to the New York Times website:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/nyt with cookies.png&quot; alt=&quot;NYT Cookies seen in Firefox inspect element&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-http-response&quot;&gt;The HTTP Response&lt;/h1&gt;

&lt;p&gt;We will learn more about the details of an HTTP Request later. Now let’s see what the Response looks like. &lt;a href=&quot;--prev_post_by_cat--&quot;&gt;As we discussed in our first lesson on HTTP&lt;/a&gt;, the HTTP Request is structured the same as the HTTP Response - it has headers followed by a body.&lt;/p&gt;

&lt;p&gt;Just as the request headers contain one essential header - the method header - the response headers contain one essential header, the &lt;em&gt;response status&lt;/em&gt;. The status contains just two elements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The status code&lt;/li&gt;
  &lt;li&gt;The status message&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The simplest, perhaps most common, HTTP response has the code &lt;strong&gt;200&lt;/strong&gt;, and the message &lt;strong&gt;OK&lt;/strong&gt;. Perhaps you’re familiar with
another common status header - the &lt;strong&gt;404&lt;/strong&gt; code, with the message, “Not Found” - that’s the header returned for a response that says that a requested resource doesn’t correspond to anything the server understands. &lt;/p&gt;

&lt;p&gt;Here is an example of a 404 page - what you get when you look for a good man in the White House:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/no_good_man.png&quot; alt=&quot;no good man in white house&quot; /&gt;&lt;/p&gt;

&lt;p&gt;usually, web servers have a standard response they return in the &lt;em&gt;body&lt;/em&gt; of the HTTP response, when the status code is 404. Many websites like to do something funny or interesting with their standard 404 response - check out the response for &lt;a href=&quot;https://github.com/its_a_404&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;http://www.google.com/its_a_404&quot;&gt;Google&lt;/a&gt;, &lt;a href=&quot;http://www.reddit.com/its_a_404&quot;&gt;Reddit&lt;/a&gt; and &lt;a href=&quot;http://mashable.com/its_a_404/&quot;&gt;Mashable&lt;/a&gt;, for some nice examples.&lt;/p&gt;

&lt;p&gt;You can use a number of request/response header viewers on the web, to see all the insides of what happens when your browser communicates with a website. A few are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rexswain.com/cgi-bin/httpview.cgi&quot;&gt;Rex Swain’s HTTP viewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://web-sniffer.net/&quot;&gt;http://web-sniffer.net/&lt;/a&gt;: This one is a bit more flexible with regard to the app layer protocol (HTTP/S)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.askapache.com/online-tools/http-headers-tool/&quot;&gt;Ask Apache&lt;/a&gt;: This one lets you customize your request a lot more.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a screenshot of a request made to the Ask Apache site above for &lt;a href=&quot;http://www.weirdity.com/internet/eoti.html&quot;&gt;The End of the Internet Page&lt;/a&gt; - the
first response header is the status header, with the “OK” message we mentioned earlier whose code is &lt;strong&gt;200&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/response headers.png&quot; alt=&quot;End of the internet response headers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next five headers are pretty common to most responses, three of which we explain here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Date: The timestamp of the response&lt;/li&gt;
  &lt;li&gt;Content-Type: The type of data that’s in the response. &lt;code&gt;text/html&lt;/code&gt; is the standard type for something a browser can understand.&lt;/li&gt;
  &lt;li&gt;Set-Cookie: The cookies this server wants to set on your browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources-and-responses&quot;&gt;Resources and Responses&lt;/h1&gt;

&lt;p&gt;So how is the request interpreted in order to create a response? The key lies in understanding the &lt;em&gt;resource&lt;/em&gt; part of the request. Remember, in &lt;a href=&quot;--prev_lesson_by_cat--&quot;&gt;our previous lesson on HTTP&lt;/a&gt;, we discussed that the request has two essential parts - a method and a resource. To refresh, the “resource” is the string of characters you type in after the domain name. In the request to the &lt;a href=&quot;http://www.weirdity.com/internet/eoti.html&quot;&gt;End of the Internet page&lt;/a&gt;, for example, the resource is &lt;code&gt;/internet/eoti.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On many servers, there is in fact a 1-1 correspondence between the resource and an actual file. The slashes in the resource will usually correspond to a folder-and-file structure on a machine somewhere. In the case of the resource &lt;code&gt;/internet/eoti.html&lt;/code&gt;, it’s very probably that somewhere on the Internet, there’s a machine, that has a folder named &lt;code&gt;internet&lt;/code&gt; in which there’s a file named &lt;code&gt;eoti.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But more and more, resources in a URL are not set up to correspond to a specific file - instead, they are meant to correspond to some action. For example, when you search for something on Google, say via the search bar in Firefox, you can see that the resource being sent to google.com is &lt;code&gt;/search&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/google search resource.png&quot; alt=&quot;a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This resource tells Google that you are interested in doing a web search on Google. If instead you wanted to read about Google, the company, you would use a different resource in your requests, namely &lt;code&gt;/about&lt;/code&gt;. Type in &lt;code&gt;www.google.com/about&lt;/code&gt; in your browser and &lt;a href=&quot;http://www.google.com/about/&quot;&gt;see what you get&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s all there is to the basic understanding of how HTTP works - of course, there is a lot more to what you can say in a request, and what a server application can say back to you in its response. But understanding resources and response statuses is the most important thing to know!&lt;/p&gt;

&lt;h1 id=&quot;advanced-topics&quot;&gt;Advanced Topics&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;You can also read about how to use browser add-ons and command-line tools to read HTTP request/response headers in detail on &lt;a href=&quot;http://stackoverflow.com/questions/809302/tool-to-view-response-headers/&quot;&gt;this Stack Overflow post&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>What is HTTP? How Web Applications and Browsers Communicate</title>
   <link href="http://www.conversationalcoding.com//beginners-series/http/2014/09/01/what-is-http/"/>
   <updated>2014-09-01T00:00:00-07:00</updated>
   <id>http://www.conversationalcoding.com//beginners-series/http/2014/09/01/what-is-http</id>
   <content type="html">&lt;p&gt;Web applications are typically written as computer programs that run constantly, waiting for &lt;em&gt;requests&lt;/em&gt; from browsers
running on other computers. Those computers can be someone’s desktop, laptop, or mobile phone. The browser requests are
usually made by a human being who clicks on a link in a webpage (or in her email,) and expects to see a webpage as a
result. The job of the web application is to respond with the code corresponding to the webpage that the browser can
interpret correctly.&lt;/p&gt;

&lt;p&gt;Browsers (and the human beings behind them) aren’t the only ones making requests to web applications. Sometimes, it’s another program that’s talking to the web application - robots talking to robots. In fact, most Internet traffic is automated - &lt;a href=&quot;http://www.cnet.com/news/bots-now-running-the-internet-with-61-percent-of-web-traffic/&quot;&gt;“non-human” traffic outnumber human-originated web traffic&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;A web application is required to do &lt;em&gt;two&lt;/em&gt; things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run constantly, waiting for requests&lt;/li&gt;
  &lt;li&gt;Accept requests that are formatted in a special &lt;em&gt;protocol&lt;/em&gt;, called the Hyper Text Transfer Protocol, or HTTP, and generate a corresponding response that’s in the HTTP format as well. This is why when you type in a webpage &lt;em&gt;URL&lt;/em&gt; into a browser’s address bar, you (frequently) prefix it &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; with the letters “h-t-t-p”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Computer programs that run constantly are also referred to conventionally as &lt;em&gt;servers&lt;/em&gt;. Hence, a web application is also sometimes called a &lt;em&gt;web server&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In this article, we’ll dig deeper into the second aspect of web applications - what is HTTP?&lt;/p&gt;

&lt;h1 id=&quot;the-structure-of-an-http-message&quot;&gt;The Structure Of An HTTP Message&lt;/h1&gt;

&lt;p&gt;Whether it is a request or a response, an HTTP message is required to contain two essential parts - the request’s &lt;em&gt;headers&lt;/em&gt;
and its &lt;em&gt;body&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;The headers typically describe something about the communication between the browser and the server itself; hence, they are referred to as containing &lt;em&gt;metadata&lt;/em&gt; - which means, “data that is about (some other) data.” For example, a header might have information about the length of the body, or about what type of data is in the body (an image, say.)&lt;/p&gt;

&lt;p&gt;The body of the HTTP response typically contains &lt;em&gt;HTML&lt;/em&gt; (Hyper Text Markup Language) code, the language understood by
browsers, but that’s not always the case.&lt;/p&gt;

&lt;h2 id=&quot;http-headers&quot;&gt;HTTP Headers&lt;/h2&gt;

&lt;p&gt;There is no definitive list of all headers - partly because the &lt;em&gt;specification&lt;/em&gt; for HTTP allows for custom headers and different web applications will add headers that they can understand and use. But there are some headers that are required.&lt;/p&gt;

&lt;p&gt;The most important header &lt;em&gt;in an HTTP request&lt;/em&gt; that you should wrap your head around is the one that contains the &lt;em&gt;method&lt;/em&gt; information. Each HTTP request consists of two essential parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;em&gt;resource&lt;/em&gt;, that gives the web application some information about what data on the server is being requested&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;method&lt;/em&gt;, that says what the web application should do with the data referenced in the &lt;em&gt;resource&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are &lt;a href=&quot;http://www.iana.org/assignments/http-methods/http-methods.xhtml&quot;&gt;many HTTP methods&lt;/a&gt; that a browser can send in an HTTP request, but the two you will most often encounter are GET and POST.&lt;/p&gt;

&lt;p&gt;The resource is usually everything you see in the browser address bar after the server name, that is, the “www.google.com” part. If you type in any website name into the browser and hit Enter, you will see that the browser adds a ‘&lt;code&gt;/&lt;/code&gt;’ at the end of the website name. That means that by default, the resource in the request is simple that - the ‘&lt;code&gt;/&lt;/code&gt;’ (or &lt;em&gt;slash&lt;/em&gt;) symbol.&lt;/p&gt;

&lt;p&gt;It’s easy to observe these headers using your browser - either Chrome or Firefox. Here, we’ll use Firefox and its “Inspect Element” feature - right click on any webpage and you’ll see this information under the Network tab. (On Chrome, you can get similar information using the Developer Tools interface under the Settings button at the top-right of the Chrome window.) You might have to hit refresh on the browser first.&lt;/p&gt;

&lt;p&gt;Below, we have the &lt;a href=&quot;http://www.xkcd.com&quot;&gt;XKCD website&lt;/a&gt; up, and you can see it generates a host of GET requests and one POST request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/network tab inspect firefox.png&quot; alt=&quot;Network Tab in Firefox Inspect Element&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;--next_post_by_cat--&quot;&gt;the follow-up to this lesson&lt;/a&gt;, we will go into more detail into how HTTP headers are constructed, and what the HTTP response looks like.&lt;/p&gt;

&lt;h1 id=&quot;advanced-topics&quot;&gt;Advanced Topics&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Find out how non-human originators of requests - bots - announce themselves in order to differentiate themselves from humans. Why might bots want to do this?&lt;/li&gt;
  &lt;li&gt;Find out what an &lt;em&gt;RFC&lt;/em&gt; is. 
    &lt;ul&gt;
      &lt;li&gt;See if you can track down a “satirical” or “joke” or “fake” RFC.&lt;/li&gt;
      &lt;li&gt;Can you understand the RFC process enough and be inspired by it enough, to write a “joke” RFC yourself?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;quick-links&quot;&gt;Quick Links&lt;/h1&gt;

&lt;p&gt;Here are some links we’ve shared in this article.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;The HTTP 1.1 specification&lt;/a&gt;, aka RFC 2616 (quasi-latest, as of Sep 2014).&lt;/li&gt;
      &lt;li&gt;A list of HTTP methods, aka &lt;a href=&quot;http://www.iana.org/assignments/http-methods/http-methods.xhtml&quot;&gt;the HTTP method registry&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lists of HTTP headers&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;And even if you don’t type in “http,” your browser will automatically, silently, do it for you. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Basics&#58; Understanding Database Queries</title>
   <link href="http://www.conversationalcoding.com//beginners-series/back-end/2014/08/31/basics-of-sql/"/>
   <updated>2014-08-31T00:00:00-07:00</updated>
   <id>http://www.conversationalcoding.com//beginners-series/back-end/2014/08/31/basics-of-sql</id>
   <content type="html">&lt;p&gt;In this exercise, we figure out how to create and update data in a database. For this purpose, we will use SQLite3 as our database application.&lt;/p&gt;

&lt;p&gt;Note that there are many applications you can use to create your relational databases (&lt;em&gt;RDBMSes&lt;/em&gt;). The most popular &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_relational_database_management_systems&quot;&gt;open source RDBMSes&lt;/a&gt; are probably Postgres, MySQL, CouchDB, and SQLite3. Which one might you use? Well, there are numerous &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems&quot;&gt;posts&lt;/a&gt; on &lt;a href=&quot;http://www.databasejournal.com/sqletc/article.php/3486596/Open-Source-Databases-A-brief-look-at-the-Berkeley-DB-Derby-Firebird-Ingres-MySQL-and-PostgreSQL-DBMS.htm&quot;&gt;the Web&lt;/a&gt; that &lt;a href=&quot;http://stackoverflow.com/questions/1635273/postgres-vs-firebird&quot;&gt;attempt to answer&lt;/a&gt; that very question! &lt;/p&gt;

&lt;p&gt;Popular paid RDBMS apps include Microsoft’s SQL Server and Oracle Corp’s Oracle suite of RDBMS.&lt;/p&gt;

&lt;p&gt;So what should you pick? We think that as a beginner, you won’t find yourself facing the kind of choices that are talked
about here, and using SQLite3 might be your best option, wining as it does on simplicity. The advantage of SQLite3 over
all other open source RDBMS applications is that the database is stored directly on a single file in your machine -
other applications require the setup of an intermediate “database server” that interacts with a much more complicated
file structure to store your data.&lt;/p&gt;

&lt;h1 id=&quot;tables-and-columns&quot;&gt;Tables and Columns&lt;/h1&gt;

&lt;p&gt;The simplest idea to know about building a database is that it contains tables, and those tables have columns. If you
have no familiarity with databases, it might be useful to think of it as a spreadsheet, with each worksheet in your
spreadsheet as a &lt;em&gt;table&lt;/em&gt;, and each column in a specific worksheet as a &lt;em&gt;column&lt;/em&gt; in that table.&lt;/p&gt;

&lt;p&gt;Columns in database tables are required to be described by at least two pieces of information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A name (which you can think of as a &lt;em&gt;column header&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;data type&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why a data type? This is usually for space and other efficiency considerations. Here’s &lt;a href=&quot;http://www.brandonsavage.net/designing-databases-picking-the-right-data-types/&quot;&gt;an old-ish but good post that describes some of these considerations&lt;/a&gt;, and another that lists &lt;a href=&quot;http://www.w3schools.com/sql/sql_datatypes_general.asp&quot;&gt;common data types that RDBMSes will support&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Data types are important for you to think about, even in beginners’ apps. Be aware at least of the following types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;string&lt;/em&gt; and &lt;em&gt;text&lt;/em&gt;, and the distinction between the two. Both are for storing textual data, but &lt;em&gt;string&lt;/em&gt; data types are used when the data is known to have a limit (usually, around 256 characters in a database.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;integer&lt;/em&gt; and &lt;em&gt;float&lt;/em&gt;: When your data is guaranteed to be numeric&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;boolean&lt;/em&gt;: When the data value is &lt;a href=&quot;http://en.wikipedia.org/wiki/Boolean_data_type&quot;&gt;Boolean&lt;/a&gt;, that is - either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;datetime&lt;/em&gt;: When the data value represents a date (but &lt;em&gt;not&lt;/em&gt; just a number representing seconds or minutes, specifically it is a very specific date on the calendar, complete with year.) &lt;em&gt;datetime&lt;/em&gt; values are represented using a specific format, called the &lt;em&gt;POSIX date&lt;/em&gt; format, which looks like “2014-07-04 07:43:12PM PST”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;talking-to-the-database&quot;&gt;Talking to the Database&lt;/h2&gt;

&lt;p&gt;SQL is the language you use to communicate with the database. Anything you do with a database requires constructing SQL to do it.&lt;/p&gt;

&lt;p&gt;Note that all SQL commands have to end with a semicolon - &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To create a table, for example, you send the following SQL command to a database&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE table_name COLUMNS (col_name_1 type1, col_name_2 type2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s customary to show SQL-specific commands, like &lt;code&gt;CREATE&lt;/code&gt; and &lt;code&gt;COLUMNS&lt;/code&gt; in uppercase and names of things like columns and types in lower-case. However, most RDBMS apps don’t differentiate between lowercase and uppercase.&lt;/p&gt;

&lt;p&gt;To add columns to an existing table, you would use the following SQL command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ALTER TABLE table_name ADD COLUMN new_col_name new_col_type;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;the-ruby-sqlite3-gem&quot;&gt;The Ruby SQLite3 Gem&lt;/h1&gt;

&lt;p&gt;When using the SQLite3 gem to communicate with a database, the process of communicating with a database is often broken down into two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Making a connection to the database, which usually happens once at the start of the application or script&lt;/li&gt;
  &lt;li&gt;Preparing a &lt;em&gt;statement&lt;/em&gt; via the connection&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Executing&lt;/em&gt; the statement&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;making-a-connection&quot;&gt;Making a connection&lt;/h2&gt;

&lt;p&gt;To make a connection, you usually need some identifier that locates the database. In the case of SQLite3, that identifier is simply the name of the file that stores the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &quot;sqlite3&quot;
db_conn = SQLite3::Database.new &quot;test.db&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the filename is &lt;code&gt;test.db&lt;/code&gt; - if it exists, then a connection is made to the database that’s in that file; else, a new file is created and all subsequent commands sent to this connection object (&lt;code&gt;db_conn&lt;/code&gt;) will write data into this file. &lt;/p&gt;

&lt;h2 id=&quot;queries-and-bindings&quot;&gt;Queries and Bindings&lt;/h2&gt;

&lt;p&gt;A query, aka &lt;em&gt;DB statements&lt;/em&gt;, or &lt;em&gt;DB queries&lt;/em&gt;, will typically contain values that are being inserted into, or updated
in, the database. Binding is the process by which you take a template DB statement, which has &lt;em&gt;placeholders&lt;/em&gt; for the values you want to insert, and assign the values to those placeholders. Placeholders are noted by the &lt;code&gt;?&lt;/code&gt; symbol. The process for doing this in the Ruby gem is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;values = [{title: &#39;Post title&#39;, body: &#39;This is a post.&#39;,  date:&#39;2014-04-01 14:35:00&#39;},
          {title: &#39;Another post&#39;, body: &#39;Another post I wrote.&#39;,  date:&#39;2014-05-11 07:12:34&#39;}]

values.each do |row|
  stmt = SQLite3::Statement.new(db_conn, &quot;INSERT INTO  posts (title, body, date_written) values (?, ?, ?)&quot;)
  stmt.bind_params(row[:title], row[:body], row[:date])
  stmt.execute 
  stmt.close
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we go through four steps for each insertion into the database:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Prepare&lt;/em&gt; the statement, by telling it which database it will operate on.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Bind&lt;/em&gt; it to the specific values we are inserting. This step, also called “sanitizing queries,” removes certain common security issues that arise when creating database queries - you can read more on this blog about &lt;a href=&quot;http://zetcode.com/db/sqliteruby/bind/&quot;&gt;query placeholders and binding and why it’s important&lt;/a&gt;. When queries are not sanitized, &lt;a href=&quot;http://security.stackexchange.com/questions/25684/how-can-i-explain-sql-injection-without-technical-jargon&quot;&gt;they make your system vulnerable to “SQL injection.”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Execute it&lt;/li&gt;
  &lt;li&gt;Close it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s “&lt;a href=&quot;http://bclennox.com/code-hygiene&quot;&gt;good coding hygiene&lt;/a&gt;” to &lt;em&gt;close&lt;/em&gt; statements and database connections. It’s somewhat like ejecting a USB device from your computer before pulling the cord out.&lt;/p&gt;

&lt;p&gt;To gain a deeper understanding of SQL, read through the MySQL reference manual listed in the References section.&lt;/p&gt;

&lt;h1 id=&quot;homework&quot;&gt;Homework&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Based on the explanation of sanitization and injection, &lt;a href=&quot;http://xkcd.com/327/&quot;&gt;explain this joke&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/sql/&quot;&gt;W3 Schools section on SQL commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/&quot;&gt;MySQL Reference Manual&lt;/a&gt; - v 5.7 as of the writing of this text book.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;POSIX date format reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Parsing the HTML to a DOM Tree</title>
   <link href="http://www.conversationalcoding.com//beginners-series/front-end/2014/08/27/parsing-the-html-to-a-dom/"/>
   <updated>2014-08-27T00:00:00-07:00</updated>
   <id>http://www.conversationalcoding.com//beginners-series/front-end/2014/08/27/parsing-the-html-to-a-dom</id>
   <content type="html">&lt;p&gt;The hierarchical structure of an HTML page is usually accessed via a data structure called the
DOM. Most programming languages have libraries that let you convert an HTML page into a DOM. Why do
we do this? HTML pages are just a long list of textual characters - for a programming language to
understand what &lt;em&gt;elements&lt;/em&gt; (another word for tags) are contained in the document, the text has to be
&lt;em&gt;parsed&lt;/em&gt; into a format that’s easier for a script to manipulate. The DOM is one such format.&lt;/p&gt;

&lt;p&gt;A DOM structure usually converts an HTML document into a &lt;em&gt;tree&lt;/em&gt;. The tree has a &lt;em&gt;root&lt;/em&gt; - which
corresponds to the element that contains the entire document, typically, either a “dummy” root that
refers to the HTML document type, or to the tag &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;. The root element, also referred to as the
&lt;em&gt;root node&lt;/em&gt;, has a list of &lt;em&gt;child nodes&lt;/em&gt; that correspond to each tag contained within the root
tag. Each of those child nodes will have further child nodes, because they might in turn contain
HTML tags, in the HTML document. For example, here’s what the “tree structure” of a very simple HTML
document (note that the root node here is the “dummy” mentioned above):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.conversationalcoding.com/assets/html_hierarchy.gif&quot; alt=&quot;DOM tree example&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;printing-out-nodes&quot;&gt;Printing Out Nodes&lt;/h1&gt;

&lt;p&gt;Nodes typically have the following information that you’re usually looking for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Its name&lt;/li&gt;
  &lt;li&gt;A list of its attributes, and the key/value components of each attribute&lt;/li&gt;
  &lt;li&gt;A list of the node’s child nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;content-nodes&quot;&gt;Content Nodes&lt;/h2&gt;

&lt;p&gt;One of the special child nodes of any node is its &lt;em&gt;content node&lt;/em&gt;. In an HTML document, the only text that is shown on the screen by the browser is the text in a content node. Note that in an HTML document, the content node is the one that has &lt;em&gt;no tag&lt;/em&gt;. This can be confusing sometimes when inspecting an HTML document visually - unless you pay careful attention to the open and close tags, you might not be able to easily figure out where the content nodes are.&lt;/p&gt;

&lt;p&gt;An additional complication is that the content nodes of &lt;em&gt;some&lt;/em&gt; tags, notably the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and
&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags, are &lt;em&gt;not&lt;/em&gt; displayed by the browser, even though visually they look the same as the
content child of any other tag, like an &lt;code&gt;h1&lt;/code&gt; tag, for example.&lt;/p&gt;

&lt;h1 id=&quot;searching-in-the-dom-tree&quot;&gt;Searching in the DOM tree&lt;/h1&gt;

&lt;p&gt;To locate a specific tag in an HTML document, you can &lt;em&gt;walk&lt;/em&gt; the DOM tree - start at the root node,
check if the node you’re looking for is one of the root’s children, and if not, then repeat the
process with the children of each child node, and so on.&lt;/p&gt;

&lt;p&gt;This can get cumbersome when trying to locate more than one node - let’s say, you’re trying to find
all the links in a document. You’d have to start at the root node, and keep track of every node that
corresponds to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag (the &lt;em&gt;anchor&lt;/em&gt; tag.)&lt;/p&gt;

&lt;p&gt;Instead, most DOM parsing libraries come with a couple of ways of instantly identifying all nodes with a specific name, or with certain attributes.&lt;/p&gt;

&lt;p&gt;The most popular DOM parsing library in Ruby is &lt;em&gt;&lt;a href=&quot;http://www.nokogiri.org/&quot;&gt;Nokogiri&lt;/a&gt;&lt;/em&gt; - this code snippet, for example, opens a file and counts how many list item tags are in it (to understand the &lt;code&gt;css&lt;/code&gt; method, read on to the next section.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;input.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;all_list_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The number of list items is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_list_items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;parsing-a-url&quot;&gt;Parsing A URL&lt;/h2&gt;

&lt;p&gt;Most times, you are going to want to parse a webpage, for which you’ll have a URL, rather than parsing a file on your computer. There are &lt;a href=&quot;http://stackoverflow.com/questions/4581075/how-make-a-http-get-request-using-ruby-on-rails&quot;&gt;many ways of fetching webpages in Ruby&lt;/a&gt;, the simplest of which is implemented by the &lt;a href=&quot;http://ruby-doc.org/stdlib-2.1.2/libdoc/open-uri/rdoc/OpenURI.html&quot;&gt;Ruby ‘openuri’ wrapper in the &lt;code&gt;stdlib&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;open-uri&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.xkcd.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;all_list_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The number of list items on XKCD&amp;#39;s homepage is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_list_items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this lesson, we’ll look at one way of doing this - &lt;code&gt;CSS Selectors&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-a-css-selector&quot;&gt;Using a CSS Selector&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;CSS Selector&lt;/em&gt; is a pattern that denotes a search within a DOM tree. The simplest CSS selector is simply the name of a tag, and it means, “Search for all nodes with this name.” &lt;/p&gt;

&lt;p&gt;For example, to search for all anchor (&lt;code&gt;a&lt;/code&gt;) tags, you would use the following method call to &lt;code&gt;css&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;all_a_links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sometimes there might be too many tags with the same name - in fact, most HTML documents are
dominated by two tags - &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags. The reason for this is that there’s been a shift
to move away from a multitude of tags, each with its own special behavior, to having a small number
of tags, whose behavior is modified by using &lt;em&gt;stylesheets&lt;/em&gt; rather than by being implicit in the name
of the tag.&lt;/p&gt;

&lt;p&gt;The most visible effect of this change is that fewer HTML pages now use the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag (and other
corresponding tags), used to visualize information in a tabular form. Instead, the visual parameters
of tables in HTML pages - width and height, size of the table’s cell borders, etc. - are now defined
in stylesheets.&lt;/p&gt;

&lt;p&gt;Coming back to CSS selectors - if there are lots of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags in a document, how do you know which one you want to select? That problem is usually solved by most HTML (or we can refer to them as “front-end”) developers by adding either a &lt;code&gt;class&lt;/code&gt; or an &lt;code&gt;id&lt;/code&gt; attribute to a tag. This leads to corresponding CSS selectors, as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To search for all tags with a specific &lt;code&gt;id&lt;/code&gt; attribute value: &lt;code&gt;tagname#id_value&lt;/code&gt; - note the &lt;code&gt;#&lt;/code&gt; character.&lt;/li&gt;
  &lt;li&gt;To search for all tags with a specific &lt;code&gt;class&lt;/code&gt; attribute value (aka, a &lt;em&gt;class name&lt;/em&gt;): &lt;code&gt;tagname.classname&lt;/code&gt; - note the period between the two parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# This searches for all divs with the class name &amp;#39;title-text&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;title_text_divs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div.title-text&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;CSS selectors are used not just in parsing a DOM tree, but also in specifying the style for nodes, using cascading stylesheets. This lesson doesn’t address how CSS works when applying styles - for a good introductory start, check out &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/What_is_CSS&quot;&gt;the Mozilla Developer Network Guide to Getting Started with CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;--next_post_by_cat--&quot;&gt;next post in this series on SQL basics&lt;/a&gt; will cover the use of SQL - we will see how to get the information we obtain from a webpage into a local (relational) database.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Some tutorials on DOM: &lt;a href=&quot;http://www.lynda.com/HTML-tutorials/What-Document-Object-Model-DOM/122462/137616-4.html&quot;&gt;A free video tutorial on Lynda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CSS
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/What_is_CSS&quot;&gt;How to use CSS to style your HTML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;More on selectors: &lt;a href=&quot;http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048&quot;&gt;the basics&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML Basics&#58; Understanding HTML and the DOM</title>
   <link href="http://www.conversationalcoding.com//beginners-series/front-end/2014/08/26/html-basics/"/>
   <updated>2014-08-26T00:00:00-07:00</updated>
   <id>http://www.conversationalcoding.com//beginners-series/front-end/2014/08/26/html-basics</id>
   <content type="html">&lt;p&gt;To start, let’s breeze through a basic understanding of HTML. If you are reading this webpage
in a desktop browser, like Firefox, you should be able to view source, typically via the top-level
menu or the right click menu. You will see the text of the webpage interspersed with what are called
HTML tags, which are text strings prefixed with the &lt;code&gt;&amp;lt;&lt;/code&gt; character. Here, for example, is the source of this very page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.conversationalcoding.com/assets/view_source.png&quot; alt=&quot;View Source Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tags are part of the HTML language specification - to put it simply, each tag has a &lt;em&gt;name&lt;/em&gt;, and
a list of &lt;em&gt;tag attributes&lt;/em&gt;. The tag attributes are specific as &lt;em&gt;key/value pairs&lt;/em&gt;, in the form
&lt;code&gt;key=value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tags define a hierarchical structure - each tag is said to &lt;em&gt;contain&lt;/em&gt; one or more other tags, and
the containment is shown by using pairs of &lt;em&gt;opening&lt;/em&gt; and &lt;em&gt;closing&lt;/em&gt; tags. Closing tags are written
simply in the form &lt;code&gt;&amp;lt;/tag_name&amp;gt;&lt;/code&gt; - note that they start with &lt;code&gt;&amp;lt;/&lt;/code&gt; and end in &lt;code&gt;&amp;gt;&lt;/code&gt;. Above you’ll see that the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; opening tag is closed by a corresponding &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; closing tag. Note that not all tags need to come in opening and closing pairs. To learn more about which which tags to close, which not to, and why there’s a difference, read &lt;a href=&quot;http://www.colorglare.com/2014/02/03/to-close-or-not-to-close.html&quot;&gt;this good blog post on &lt;em&gt;void elements&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple HTML document has the following structure - the entire document is contained inside the
&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, and typically, the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag contains a minimum of two tags, the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and the
&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;em&gt;well-formed&lt;/em&gt; HTML documents also declare their &lt;em&gt;document type&lt;/em&gt;, which in the case of an HTML document is, simply, “html”.&lt;/p&gt;

&lt;p&gt;By convention, some tags are referred to typically by longer names - the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag for example is
called the &lt;em&gt;anchor&lt;/em&gt; tag; any tag that is the letter &lt;code&gt;h&lt;/code&gt; followed by a number - like &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; - is
called a &lt;em&gt;header&lt;/em&gt; tag; the tag &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is called the &lt;em&gt;list item&lt;/em&gt; tag, and so on. Frequently, if not
always, tag names are simply acronyms for the “long name version.”&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;The entire HTML specification will take a while to learn, but some good resources to start from are listed here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[]()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our &lt;a href=&quot;--next_post_by_cat--&quot;&gt;next lesson is on understanding how to convert this HTML hierarchy into a
“DOM”&lt;/a&gt; - away of turning a page full of HTML text into something you can easily
manipulate in a program.&lt;/p&gt;

</content>
 </entry>
 

</feed>
